<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AeroSwift - Usuário</title>
    <link rel="stylesheet" href="/css/users.css">
    <link rel="shortcut icon" href="/images/favicon.svg" type="image/x-icon">
</head>
<body>
    <header>
        <div class="logo-container">
            <img src="/images/marca.svg" alt="marca" class="logo">
        </div>

        <nav>
            <ul>
                <li><a href="/gestor/home">OPERAÇÕES</a></li>
                <li><a href="/gestor/services">SERVIÇOS</a></li>
                <li><a href="/gestor/farm">FAZENDAS</a></li>
                <li>
                    <button class="perfil-btn" id="openModalBtn">
                        <img src="/images/perfil.svg" alt="Perfil" class="perfil-icon">
                    </button>
                </li>
            </ul>
        </nav>

        <div id="perfilModal" class="modal">
            <div class="modal-content">
                <ul>
                    <li>
                        <button class="header-button" type="button" onclick="window.location.href='/gestor/user'">
                            <img src="/images/newuser.svg" alt="Novo Usuário" class="icon"> Novo usuário
                        </button>
                    </li>
                    <li>
                        <button class="header-button" id="logoutBtn">
                            <img src="/images/logout.svg" alt="Logout" class="icon"> Logout
                        </button>
                    </li>
                </ul>
            </div>
        </div>
    </header>

    <div class="users-container">
        <h2 class="table-title">Lista de usuários</h2>
        <table class="users-table">
            <thead>
                <tr>
                    <th>Nome</th>
                    <th>Telefone</th>
                    <th>Usuário</th>
                    <th>Senha</th>
                    <th>Ações</th>
                </tr>
            </thead>
            <tbody>
                <% usuarios.forEach(usuario => { %>
                    <tr data-id="<%= usuario.id %>">
                        <td class="edit" data-field="nome"><%= usuario.nome %></td>
                        <td class="edit" data-field="telefone"><%= usuario.telefone %></td>
                        <td class="edit" data-field="usuario"><%= usuario.usuario %></td>
                        <td class="edit" data-field="senha" contenteditable="false">••••••••</td> <!-- Mostra a senha como ocultada -->
                        <td>
                            <button class="edit-button" onclick="enableEdit(this)">
                                <img src="/images/edit.svg" alt="">
                            </button>
                            <button class="save-button" onclick="saveChanges(<%= usuario.id %>)" style="display: none;">Salvar</button>
                            <button class="cancel-button" onclick="cancelEdit(this)" style="display: none;">Cancelar</button>
                            <button class="delete-button" onclick="deleteUser(<%= usuario.id %>)">
                                <img src="/images/delete.svg" alt="">
                            </button>
                        </td>
                    </tr>
                <% }) %>
            </tbody>
        </table>
    </div>

    <script>

    // Pegar o botão e o modal
    const openModalBtn = document.getElementById('openModalBtn');
    const modal = document.getElementById('perfilModal');

    // Quando o botão for clicado, mostra ou esconde o modal
    openModalBtn.onclick = function(event) {
        event.stopPropagation(); // Evita que o clique no botão feche o modal
        modal.classList.toggle('show'); // Alterna a visibilidade do modal
    };

    // Fecha o modal ao clicar fora dele
    window.onclick = function(event) {
        if (!modal.contains(event.target) && event.target !== openModalBtn) {
            modal.classList.remove('show'); // Remove a classe 'show' para fechar o modal
        }
    };
    
    // Função para habilitar edição na linha correspondente
    function enableEdit(editButton) {
        const row = editButton.closest('tr');
        const saveButton = row.querySelector('.save-button');
        const cancelButton = row.querySelector('.cancel-button');
        const fields = row.querySelectorAll('.edit');

        // Tornar os campos editáveis
        fields.forEach(field => {
            field.contentEditable = true;
            field.classList.add('editable');
        });

        // Alternar visibilidade dos botões
        editButton.style.display = 'none';
        saveButton.style.display = 'inline';
        cancelButton.style.display = 'inline';
    }

    // Função para salvar as alterações feitas na linha
    function saveChanges(userId) {
        const row = document.querySelector(`tr[data-id='${userId}']`);
        const fields = row.querySelectorAll('.edit');
        let valid = true; // Variável para validação
        const updatedData = {};

        // Validar campos e coletar dados
        fields.forEach(field => {
            const fieldName = field.getAttribute('data-field');
            const fieldValue = field.innerText.trim();

            if (fieldName === 'nome') {
                // Validar para aceitar apenas letras e espaços
                if (!/^[A-Za-zÀ-ÿ\s]+$/.test(fieldValue)) {
                    alert('O campo "Nome" deve conter apenas letras e espaços.');
                    valid = false;
                }
            }

            if (fieldName === 'telefone') {
                // Validar para aceitar apenas números
                if (!/^\d+$/.test(fieldValue)) {
                    alert('O campo "Telefone" deve conter apenas números.');
                    valid = false;
                }
            }

            updatedData[fieldName] = fieldValue;
        });

        if (!valid) return; // Interrompe o salvamento se houver erro

        // Enviar os dados ao servidor
        fetch(`/gestor/user/edit/${userId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(updatedData)
        })
        .then(response => {
            if (response.ok) {
                alert('Usuário atualizado com sucesso!');
                // Recarrega a página após o alerta de sucesso
                window.location.reload();
            } else {
                alert('Erro ao atualizar usuário.');
            }
        })
        .catch(error => {
            console.error('Erro:', error);
            alert('Erro ao atualizar usuário.');
        })
        .finally(() => {
            // Desabilitar a edição e alternar botões
            fields.forEach(field => {
                field.contentEditable = false;
                field.classList.remove('editable');
                if (field.getAttribute('data-field') === 'senha') {
                    field.innerText = '••••••••'; // Oculta a senha novamente após salvar
                }
            });
            row.querySelector('.edit-button').style.display = 'inline';
            row.querySelector('.save-button').style.display = 'none';
            row.querySelector('.cancel-button').style.display = 'none';
        });
    }

    // Função para cancelar a edição
    function cancelEdit(cancelButton) {
        const row = cancelButton.closest('tr');
        const fields = row.querySelectorAll('.edit');

        // Restaurar valores originais
        fields.forEach(field => {
            field.innerText = field.getAttribute('data-original-value');
            field.contentEditable = false;
            field.classList.remove('editable');
        });

        // Alternar visibilidade dos botões
        row.querySelector('.edit-button').style.display = 'inline';
        row.querySelector('.save-button').style.display = 'none';
        cancelButton.style.display = 'none';
    }

    // Salvar o valor original ao carregar a página
    document.addEventListener('DOMContentLoaded', () => {
        const fields = document.querySelectorAll('.edit');
        fields.forEach(field => {
            field.setAttribute('data-original-value', field.innerText);
        });
    });

    // Função para deletar usuário
    function deleteUser(userId) {
        if (confirm('Deseja realmente excluir este usuário?')) {
            fetch(`/gestor/user/delete/${userId}`, {
                method: 'DELETE',
            })
            .then(response => {
                if (response.ok) {
                    alert('Usuário deletado com sucesso!');
                    const row = document.querySelector(`tr[data-id='${userId}']`);
                    row.remove();
                } else {
                    alert('Erro ao deletar usuário.');
                }
            })
            .catch(error => {
                console.error('Erro:', error);
                alert('Erro ao deletar usuário.');
            });
        }
    }

     // Função para fazer o logout
     document.getElementById('logoutBtn').onclick = function() {
            // Redireciona para a rota de logout
            window.location.href = '/gestor/logout';
        };
    </script>
</body>
</html>
